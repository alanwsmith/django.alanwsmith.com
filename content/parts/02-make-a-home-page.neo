-- title

Section 2 - Make A Home Page

-- h2

Introduction 

Django provided us with a nice default home page to 
let us know that things are working, but we don't 
want it to be what folks would see if they visited
our site. Instead, we'll make our own basic home
page.

Before we get started, <<ilink|make sure the Python
virtual environment is active|2mcf8e2u>>.

-- h2

The Steps

-- list/

- Examine the initial url paths

The first change we're going make is to update the routing
functionality to point calls to the root of the site. 
These changes are made in the file:

-- pre/

django_tutorial/tutorial_site/tutorial_site/urls.py

-- /pre

Before we make any changes, let's examine the initial version 
of the file that looks like this:

-- code/
-- python
-- subtitle: django_tutorial/tutorial_site/tutorial_site/urls.py

# A bunch of comments are here that we're 
# going to ignore

from django.contrib import admin
from django.urls import path

urlpatterns = [
    path("admin/", admin.site.urls),
]

-- /code


These first two lines of code are:

-- code/
-- python

from django.contrib import admin
from django.urls import path

-- /code

These lines import some of Django's
default functionality that's used for the 
configuration. 

The next snippet of code is:

-- code/
-- python

urlpatterns = [
    path("admin/", admin.site.urls),
]

-- /code

The <<code|urlpatterns = []|python>> list holds a 
collection of <<code|path()|python>> functions. These are
what define the specific url paths that define the routes. 

The <<code|path()|python>> functions take two required arguments. The first is 
a pattern to match in the requested page's URL. The second
is what to do when a match is found. (The <<code|path()|pyton>> 
function can also take two optional arguments for "kwargs" and "name"
that we'll see later.)

The initial path that's include by default is:

-- code/
-- python

path("admin/", admin.site.urls)

-- /code

It tells Django to match "admin/" from the URL of
a page request and send it to the built in admin functionality
defined in <<code|admin.site.urls|python>>. This is what
powers the http://127.0.0.1:8000/admin/ pages. 

- Adding the new url path route

We need to do two things to create the new url path route
for the home page. First, we need to import a new module 
with:

-- code/
-- python

from django.urls import include

-- /code

Then, we need to add a new path with:

-- code/
-- python

path("", include("homepage.urls")),

-- /code

The empty <<code|""|python>> match argument
means the <<code|path()|python>> is for the root
of the site (i.e. http://127.0.0.1:8000/) and
the <<code|include("homepage.urls")|python>> tells
Django that we want to use an app/module named
"homepage" to handle it. (We haven't created this
module yet, so this will cause an expected error
that we see below.)

Putting those two lines in place updates the file
to look like this which you can copy and paste 
to replace the contents of the original:

-- code/
-- python
-- subtitle: django_tutorial/tutorial_site/tutorial_site/urls.py

from django.contrib import admin
from django.urls import path
from django.urls import include

urlpatterns = [
    path("", include("homepage.urls")),
    path("admin/", admin.site.urls),
]

-- /code

When we save that file the Django server in the 
terminal will reload itself and show an error
that ends with: 

-- pre/

ModuleNotFoundError: No module named 'homepage'

-- /pre

It'll take us a few steps to get the home page to show
up, but we'll start by tackling that error. 

- Stop the server

We'll need to run another <<code|python manage.py>> command
in the next step. Let's stop the server by holding down 
the <<kbd|control>> key on the keyboard then pressing <<kbd|c>>

- Make the new app/module

The error message starts with "ModuleNotFountError". In Django's
terminology the module it's looking for is called an "app". (TODO:
more details on app/module). 

Run this command to create our new "homepage" app/module:

-- cli/

python manage.py startapp homepage

-- /cli

- Register the newly created app/module

After creating the app/module with "startapp" in the previous 
command we have to configure Django to use it. We do this
by adding this line:

-- pre/

"homepage.apps.HomepageConfig",

-- /pre

to the <<code|INSTALLED_APPS>> list variable in the file:

-- pre/

django_tutorial/tutorial_site/tutorial_site/settings.py 

-- /pre

There's a lot to that file so you'll have to scroll down
some to find it. When you've made the update, the variable
should look like this:

-- code/
-- python

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "homepage.apps.HomepageConfig",
]

-- /code

TODO: Link to some docs about how the <<code|"homepage.apps.HomepageConfig",>> 
line works. 

- Start the server

With that change in place, we're ready to start the
server again which will show us a new error. Run
this to start the server:

-- cli/

python manage.py runserver

-- /cli

The error in the console changes from:

-- pre/

ModuleNotFoundError: No module named 'homepage'

-- /pre

To:

-- pre/

ModuleNotFoundError: No module named 'homepage.urls'

-- /pre

- Stop the server 

We're going to add a new file in the next step. We'll
need to restart the server to see the change so 
we can stop it now with:

<<kbd|control>>+<<kbd|c>>

- Add a <<code|homepage/urls.py>> file

Django is looking for a file at:

-- pre/

django_tutorial/tutorial_site/homepage/urls.py

-- /pre

When we ran the <<code|python manage.py startapp homepage>> 
command it built a bunch of default files in the "homepage"
directory, but "url.py" wasn't one of them. We have 
to make it ourselves. Create it now and add this for
the contents of the file:

-- code/
-- python
-- subtitle: django_tutorial/tutorial_site/homepage/urls.py

from django.urls import path

from . import views

app_name = "homepage"
urlpatterns = [
    path("", views.index, name="index"),
]

-- /code

This file looks a lot like: 

-- pre/

django_tutorial/tutorial_site/tutorial_site/urls.py

-- /pre

In fact, they two files work together. Inside that file
the line:

-- code/
-- python

path("", include("homepage.urls")),

-- /code

calls out to include the file we just created at:

-- pre/

django_tutorial/tutorial_site/homepage/urls.py

-- /pre

- Examine the new urls.py file

Let's take a quick look at the lines of the new "urls.py" file
to see what's going on. 

Details:

-- list/

- The first line is a the basic import statement that
let's use use the <<code|path()|python>> function in 
our <<code|urlpatterns|python>> variable later in the file.

-- code/
-- python

from django.urls import path

-- /code


- The next line of code is:

-- code/
-- python

from . import views

-- /code

This imports the "views.py" file from the current
directory. In this case that means it's pointing to:

-- pre/

django_tutorial/tutorial_site/homepage/views.py

-- /pre

We'll be editing that file in our next step. 

- The next code line is:

-- code/
-- python

app_name = "homepage"

-- /code

The "app_name" provides us with part of what we need
to automatically generate links. We'll see more about
how that works in a moment. 

- Next we get to:

-- code/
-- python

urlpatterns = [
    path("", views.index, name="index"),
]

-- /code

These paths are combined with those from the top level 
file (i.e. <<code|django_tutorial/tutorial_site/tutorial_site/urls.py>>)
to create that pattern matches for requested URLs and 
assocaite them with their respective actions. 

In this case, we have an <<code|"">> empty string for the 
matcher. TODO: show how this works with the top level
urls.py file to serve the home page.

The "views.index" parameter tells Django that we want 
to use the "index" function from the "views.py" file
that was imported earlier. (That function doesn't 
exist yet, so we'll expect an error that we'll discuss
in a moment)

The last argument passed to the path is <<code|name="index">>. 
This name is the second component we can use to 
automatically generate links to specific URLs. In this 
case, our "app_name" from above is "homepage" which we combine
with "index" into the format "homepage:index". We'll see
examples of how this is used later in the tutorial. 


-- /list

- Start the server

With our new <<code|urls.py>> file in place we can start
the server again to see our new error message. Run it
with the command:

-- cli/

python manage.py runserver

-- /cli

The server will dump a big error message that ends with:

-- pre/

AttributeError: module 'homepage.views' has no attribute 'index'

-- /pre

This is exactly what we're expecting since we know that 
we haven't yet created an "index" function in the homepage
app's "views.py" file. We'll do that now. 

- Add and "index" function to the homepage app's "views.py" file

The file we need to edit is:

-- pre/

django_tutorial/tutorial_site/homepage/views.py

-- /pre

The default version that was created when we ran the "startapp"
command contains only a single line of code and a comment
that looks like this:

-- code/
-- python

from django.shortcuts import render

# Create your views here.

-- /code

We can remove the comment and create a new "index" function
that Django is looking for. Here's the full contents of
what the file should look like:

-- code/
-- python

from django.shortcuts import render

def index(request):
    context = {}
    return render(request, "homepage/index.html", context)

-- /code

paste that in and save the file which will automatically 
reload the server and clear the errors and should show 
this response:

-- pre/

Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
September 26, 2024 - 22:41:21
Django version 5.1.1, using settings 'tutorial_site.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

-- /pre

At this point we can open our browser to our home page
which will have changed from the default Django home page
to an error page that starts with 

-- pre/

TemplateDoesNotExist at /

-- /pre

We'll address that in a moment, but first let's look 
and the file we just updated. 


- Examine the homepage views.py file

Details:

-- list/

- The first line is:

-- code/
-- python

from django.shortcuts import render

-- /code

This imports some of the built-in Django functionality
for a <<code|render()|python>> function that we'll use
as the return value for our function. 

- The next code line is:

-- code/
-- python

def index(request):

-- /code

This creates a new Python function named "index" that
expects a "request" object to be passed to it. Since
we're in the "views.py" file this is what the "views.index"
portion of the <<code|path()|python>> function in the 
homepage "urls.py" file from above points to. 

- Our next line is:

-- code/
-- python

context = {}

-- /code

The context is something that's required to be passed
to <<code|render()|python>> on the next line. We don't need
to do anything with it on our homepage so it's empty here. 

- Our last line is:

-- code/
-- python

return render(request, "homepage/index.html", context)

-- /code

This is the respose that's returned to Django for assembly 
into the content that's sent back to the browser. The value
that's returned is from the <<code|render()|python>> function. 
It takes three arguments:

-- list/

- The "request" object that was passed into the "index" function

- The template to use for the rendering (in this case "homepage/index.html")

- And the context (which we defined as empty in the prior line)

-- /list

-- /list




- Add the template at:

<<code|tutorial_site/homepage/templates/homepage/index.html>>

Note that you'll need to make the directories:

<<code|tutorial_site/homepage/templates>>

and

<<code|tutorial_site/homepage/templates/homepage>>

TODO: walk through the namespace logic of why 
the paths have the name twice. 

-- code/
-- html

<!DOCTYPE html>
<html>
  <body>
    <h1>Hello, world</h1>
  </body>
</html>

-- /code

- Stop the server with <<kbd|Ctrl>>+<<kbd|c>> and 
restart it with:

-- code/
-- python

python manage.py runserver

-- /code

When you refresh the page at: http://127.0.0.1:8000/
you'll see your "Hello, world" text


-- /list




-- h2

Links

Previous: <<tlink|2mc6armk>>

Next: TKTKTKT

-- metadata
-- created: 2024-09-26T15:26:05-04:00
-- updated: 2024-09-26T15:26:05-04:00
-- id: 2mcbmij7
-- type: post
-- status: scratch



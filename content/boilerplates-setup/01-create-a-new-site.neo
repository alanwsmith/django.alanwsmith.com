-- title

Boilerplate: Create A New Django Site/Project

-- h2

Introduction 

These are the basic Mac commands to create a 
new Django site (aka project). I expect the commands
should work on most linux installs too, but haven't 
had a chance to check it. I'll do that and add a
Windows version as time allows. There's also more 
about the process in the <<em|Boilerplate Details>> section 
further below. 

-- h2

Boilerplate Steps 

-- olist/

- Specify the name for your site/project directory
and intial module name (which I default to site_files
for consistency):

-- html/

<form>
  <div>
    <label for="dir-name">Directory Name:</label>
    <input type="text" id="dir-name" value="django_example"/ >
  </div>
  <div>
    <label for="module-name">Module Name:</label>
    <input type="text" id="module-name" value="site_files"/ >
  </div>
</form>

<noscript>This page requires javascript to build the commands</noscript>

-- /html

- Run these Mac commands

The last step will be to create a superuser accont
which you'll need to fill out some details for. I use 
"admin" for the username, keep the email blank, and use
a simple password when I'm making test boilerplate
sites, but you can use whatever you want.

-- pre/
-- title: site/project creation commands
-- class: highlight
-- id: commands

-- /pre


- Start the server

-- pre/
-- title: start the server
-- class: highlight

python manage.py runserver

-- /pre

- Verify the default home page shows up

-- link/
-- title: home page link
-- class: highlight

<<tablink|http://127.0.0.1:8000/|http://127.0.0.1:8000/>>

-- /link

-- /olist

-- h2

Next Steps

That's it for the site creation. If you're setting
up for a new boilerplate example, the next step is:

<<tlink|2mqmyqi8>>




-- javascript

function update_commands() {
  const dir_name = document.querySelector("#dir-name").value
  const module_name = document.querySelector("#module-name").value
  const commands = document.querySelector("#commands pre")
  commands.innerText = `type deactivate &> /dev/null && deactivate
mkdir ${dir_name} 
cd ${dir_name}
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip
python -m pip install Django
django-admin startproject ${module_name}
git init
echo "venv" > .gitignore
echo ".env" >> .gitignore
echo "*.log" >> .gitignore
echo "*.pot" >> .gitignore
echo "*.pyc" >> .gitignore
echo "__pycache__" >> .gitignore
echo "db.sqlite3" >> .gitignore
echo "media" >> .gitignore
git add .
git commit -m "Initial commit"
git checkout -b dev
cd ${module_name}
python manage.py migrate
python manage.py createsuperuser
`
}

document.addEventListener("DOMContentLoaded", () => {
  update_commands()
  const dir_input = document.querySelector("#dir-name")
  dir_input.addEventListener("input", (event) => {
    update_commands()
  })
  const module_input = document.querySelector("#module-name")
  module_input.addEventListener("input", (event) => {
    update_commands()
  })
})

-- h2

Boilerplate Details

-- list

- The commands work on a Mac. They migth work on any
given linux install. I'll make a Windows
version when I have the resources to work on it.

- The process creates a directory with your specified name.
It then creates a django site/project inside it using the 
Module Name you defined. I go with "site_files" for consistency 
among my sites. Most instructions I see use a more specific name,
but I haven't been able to determine if there's a reason to 
not stick with a generic one. 

- The process creates a Python virtual environment and activates
it. Django is then installed inside it to avoid messing
with the system install of Python.

- The process creates a git repo and <<path|.gitignore>> file
that ignore the <<path|.env>> file, <<path|venv>> directory, 
<<path|db.sqlite3>> database, and
some other python/django related files that don't need to be
stored. 

- The intiail code is committed to the git repo and a 
new branch named dev is created and checked out to work on. 

- All the initial database migrations are run to set up
the database. 

- The <<code|createsuperuser>> command is run at the end to
prompt for super user account details. 




-- metadata
-- created: 2024-09-30T12:26:34-04:00
-- updated: 2024-09-30T12:26:34-04:00
-- id: 2mny1qlt
-- type: post
-- status: published 


